#!/usr/bin/env bash
# script adapted from the sources in qmk

: ${hex:=${1}}
: ${side:=${2:-left}}

cat <<EOF



    HEX       $hex
    SIDE      $side



EOF

list_devices() {
  if grep -q -s icrosoft /proc/version; then
    wmic.exe path Win32_SerialPort get DeviceID 2>/dev/null |
      LANG=C perl -pne 's/COM(\d+)/COM.($1-1)/e' |
      sed 's!COM!/dev/ttyS!' |
      xargs echo -n |
      sort
  elif [ "`uname`" = "FreeBSD" ]; then
    ls /dev/tty* |
      grep -v '\.lock$' |
      grep -v '\.init$'
  else
    ls /dev/tty*
  fi
}

symbs=( "waiting " " for " " you " " ... " )
USB=
cat <<EOF

  Waiting for USB serial port - reset your controller now (Ctrl+C to cancel)

EOF
TMP1=`mktemp`
TMP2=`mktemp`
list_devices > $TMP1
while [ -z "$USB" ]; do
  sleep 0.5
  let ++i
  printf "${symbs[$((i%4))]}"
  list_devices > $TMP2
  USB=`comm -13 $TMP1 $TMP2 | grep -o '/dev/tty.*'`
  mv $TMP2 $TMP1
done
rm $TMP1


cat <<EOF

Device $USB has appeared; assuming it is the controller.
Waiting for $USB to become writable.

EOF
while [ ! -w "$USB" ]; do
  let ++i
  sleep 0.5
  printf "${symbs[$((i%4))]}"
done
echo ""


if [[ ${side} = none ]]; then
  avrdude             \
    -p m32u4          \
    -c avr109         \
    -P $USB           \
    -U flash:w:$hex
else
  avrdude             \
    -p m32u4          \
    -c avr109         \
    -P $USB           \
    -U flash:w:$hex   \
    -U eeprom:w:eeprom-${side}hand.eep
fi
